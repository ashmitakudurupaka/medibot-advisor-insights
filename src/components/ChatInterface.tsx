
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Separator } from "@/components/ui/separator";
import { Send, Bot, User, Loader2, AlertTriangle } from "lucide-react";

interface Message {
  id: string;
  role: "user" | "assistant";
  content: string;
  timestamp: Date;
  model?: string;
}

const ChatInterface = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [selectedModel, setSelectedModel] = useState("peft-lora");

  const models = [
    { id: "prompt-tuning", name: "Prompt Tuning", description: "Lightweight parameter updates" },
    { id: "peft-lora", name: "PEFT LoRA", description: "Low-rank adaptation fine-tuning" },
    { id: "qlora", name: "QLoRA", description: "Quantized LoRA with 8-bit precision" }
  ];

  const handleSendMessage = async () => {
    if (!input.trim() || isLoading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      role: "user",
      content: input,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInput("");
    setIsLoading(true);

    // Simulate AI response with medical formatting
    setTimeout(() => {
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: "assistant",
        content: generateMedicalResponse(input),
        timestamp: new Date(),
        model: selectedModel
      };
      setMessages(prev => [...prev, aiMessage]);
      setIsLoading(false);
    }, 2000);
  };

  const generateMedicalResponse = (query: string): string => {
    return `Based on your query regarding "${query.slice(0, 50)}...", here is some preliminary guidance:

**Assessment:**
The symptoms you've described may be related to several common conditions. However, a proper medical evaluation is essential for accurate diagnosis.

**General Recommendations:**
• Monitor your symptoms and note any changes in severity or frequency
• Maintain adequate hydration and rest
• Consider over-the-counter remedies if appropriate for your symptoms
• Seek immediate medical attention if symptoms worsen or new concerning symptoms develop

**When to Seek Medical Care:**
• If symptoms persist beyond 48-72 hours
• If you experience severe pain, difficulty breathing, or other concerning symptoms
• If you have underlying health conditions that may complicate your current symptoms

**Important Disclaimer:**
This guidance is for informational purposes only and does not constitute medical advice. Please consult with a qualified healthcare provider for proper diagnosis and treatment recommendations tailored to your specific situation.

*Generated by ${models.find(m => m.id === selectedModel)?.name} model*`;
  };

  return (
    <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
      {/* Model Selection */}
      <div className="lg:col-span-1">
        <Card>
          <CardHeader>
            <CardTitle className="text-lg">Active Model</CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            {models.map((model) => (
              <div
                key={model.id}
                className={`p-3 rounded-lg border cursor-pointer transition-all ${
                  selectedModel === model.id
                    ? "bg-blue-50 border-blue-200 ring-2 ring-blue-100"
                    : "bg-gray-50 border-gray-200 hover:bg-gray-100"
                }`}
                onClick={() => setSelectedModel(model.id)}
              >
                <div className="font-medium text-sm">{model.name}</div>
                <div className="text-xs text-gray-600 mt-1">{model.description}</div>
              </div>
            ))}
          </CardContent>
        </Card>
      </div>

      {/* Chat Interface */}
      <div className="lg:col-span-3">
        <Card className="h-[600px] flex flex-col">
          <CardHeader className="flex-shrink-0">
            <CardTitle className="flex items-center space-x-2">
              <Bot className="h-5 w-5 text-blue-600" />
              <span>Medical AI Consultation</span>
              <Badge variant="outline" className="ml-auto">
                {models.find(m => m.id === selectedModel)?.name}
              </Badge>
            </CardTitle>
          </CardHeader>

          <Separator />

          {/* Messages */}
          <ScrollArea className="flex-1 p-4">
            <div className="space-y-4">
              {messages.length === 0 && (
                <div className="text-center text-gray-500 py-8">
                  <Bot className="h-12 w-12 mx-auto mb-4 text-gray-400" />
                  <p className="text-lg font-medium mb-2">Welcome to MedAI Assistant</p>
                  <p className="text-sm">
                    Describe your symptoms or medical questions to receive AI-powered guidance.
                  </p>
                  <div className="mt-4 p-3 bg-amber-50 rounded-lg">
                    <div className="flex items-start space-x-2">
                      <AlertTriangle className="h-4 w-4 text-amber-600 mt-0.5" />
                      <p className="text-xs text-amber-800">
                        Remember: This is for informational purposes only and does not replace professional medical advice.
                      </p>
                    </div>
                  </div>
                </div>
              )}

              {messages.map((message) => (
                <div
                  key={message.id}
                  className={`flex items-start space-x-3 ${
                    message.role === "user" ? "justify-end" : "justify-start"
                  }`}
                >
                  {message.role === "assistant" && (
                    <div className="bg-blue-100 p-2 rounded-full">
                      <Bot className="h-4 w-4 text-blue-600" />
                    </div>
                  )}
                  
                  <div
                    className={`max-w-[80%] rounded-lg p-4 ${
                      message.role === "user"
                        ? "bg-blue-600 text-white"
                        : "bg-gray-100 text-gray-900"
                    }`}
                  >
                    <div className="whitespace-pre-wrap text-sm">{message.content}</div>
                    <div
                      className={`text-xs mt-2 ${
                        message.role === "user" ? "text-blue-100" : "text-gray-500"
                      }`}
                    >
                      {message.timestamp.toLocaleTimeString()}
                      {message.model && ` • ${models.find(m => m.id === message.model)?.name}`}
                    </div>
                  </div>

                  {message.role === "user" && (
                    <div className="bg-blue-600 p-2 rounded-full">
                      <User className="h-4 w-4 text-white" />
                    </div>
                  )}
                </div>
              ))}

              {isLoading && (
                <div className="flex items-start space-x-3">
                  <div className="bg-blue-100 p-2 rounded-full">
                    <Bot className="h-4 w-4 text-blue-600" />
                  </div>
                  <div className="bg-gray-100 rounded-lg p-4">
                    <div className="flex items-center space-x-2">
                      <Loader2 className="h-4 w-4 animate-spin" />
                      <span className="text-sm text-gray-600">AI is analyzing your query...</span>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </ScrollArea>

          <Separator />

          {/* Input Area */}
          <div className="p-4 flex-shrink-0">
            <div className="flex space-x-3">
              <Textarea
                value={input}
                onChange={(e) => setInput(e.target.value)}
                placeholder="Describe your symptoms or medical question here..."
                className="flex-1 min-h-[60px] resize-none"
                onKeyDown={(e) => {
                  if (e.key === "Enter" && !e.shiftKey) {
                    e.preventDefault();
                    handleSendMessage();
                  }
                }}
              />
              <Button
                onClick={handleSendMessage}
                disabled={!input.trim() || isLoading}
                className="px-6"
              >
                <Send className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </Card>
      </div>
    </div>
  );
};

export default ChatInterface;
